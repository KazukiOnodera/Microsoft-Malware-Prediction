#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May  9 15:28:58 2018

@author: kazuki.onodera
"""

import numpy as np
import pandas as pd
import itertools
import seaborn as sns
from matplotlib import pyplot as plt
from matplotlib_venn import venn2

def df_info(target_df, topN=10):
    
    max_row = target_df.shape[0]
    print(f'Shape: {target_df.shape}')
    
    df = target_df.dtypes.to_frame()
    df.columns = ['DataType']
    df['#Nulls'] = target_df.isnull().sum()
    df['#Uniques'] = target_df.nunique()
    
    # stats
    df['Min']   = target_df.min(numeric_only=True)
    df['Mean']  = target_df.mean(numeric_only=True)
    df['Max']   = target_df.max(numeric_only=True)
    df['Std']   = target_df.std(numeric_only=True)
    
    # top 10 values
    df[f'top{topN} val'] = 0
    df[f'top{topN} cnt'] = 0
    df[f'top{topN} raito'] = 0
    for c in df.index:
        vc = target_df[c].value_counts().head(topN)
        val = list(vc.index)
        cnt = list(vc.values)
        raito = list((vc.values / max_row).round(2))
        df.loc[c, f'top{topN} val'] = str(val)
        df.loc[c, f'top{topN} cnt'] = str(cnt)
        df.loc[c, f'top{topN} raito'] = str(raito)
        
    return df

# =============================================================================
# category
# =============================================================================
def top_categories(df, category_feature, topN=30):
    return df[category_feature].value_counts().head(topN).index

def count_categories(train, category_features, topN=30, sort='freq', test=None):
    
    for c in category_features:
        
        plt.figure(figsize=(10,5))
        
        target_value = train[c].value_counts().head(topN).index
        
        if sort=='freq':
            order = target_value
        elif sort=='alphabetic':
            order = train[c].value_counts().head(topN).sort_index().index
        
        if test is not None:
            plt.subplot(1, 2, 1)
        sns.countplot(x=c, data=train[train[c].isin(order)], order=order)
        plt.xticks(rotation=90)
        
        if test is not None:
            plt.subplot(1, 2, 2)
            sns.countplot(x=c, data=test[test[c].isin(order)], order=order)
            plt.xticks(rotation=90)
        
        if test is not None:
            plt.suptitle(f'{c} TOP{topN}', size=25)
        else:
            plt.title(f'{c} TOP{topN}', size=25)
        plt.tight_layout()
        plt.show()
        
    return

def venn_diagram(train, test, category_features, names=('train', 'test'), figsize=(18,13)):
    """
    category_features: max==6
    """
    n = int(np.ceil(len(category_features)/2))
    plt.figure(figsize=figsize)
    
    for i,c in enumerate(category_features):
        plt.subplot(int(f'{n}2{i+1}'))
        venn2([set(train[c].unique()), set(test[c].unique())], 
               set_labels = names )
        plt.title(f'{c}', fontsize=18)
    plt.show()
    
    return

def category_only_test(train, test, category_features):
    
    for category in category_features:
        li = list( set(test[category]) - set(train[category]) )
        if len(li)>0:
            vc = test[category].value_counts(normalize=True)
            vc = vc[vc.index.isin(li)].head(30)
            
            plt.bar(range(len(vc)), vc.values, tick_label=vc.index)
            plt.xticks(rotation=90)
            plt.title('test'); plt.ylim(0,1)
            plt.ylabel(category)
            plt.grid(True)
            plt.show()
        else:
            print(f"All {category}'s values exists")
    return


def category_diff(train, test, category):
    
    tmp_tr = train[category].value_counts(normalize=True)
    tmp_tr.name = 'tr'
    tmp_te = test[category].value_counts(normalize=True)
    tmp_te.name = 'te'
    tmp = pd.concat([tmp_tr, tmp_te], axis=1, join='outer').fillna(0)
    tmp['d'] = tmp['te'] - tmp['tr']
    tmp['d_abs'] = tmp['d'].abs()
    tmp.sort_values('d_abs', ascending=False, inplace=True)
    tmp = tmp.head(30)
    tmp['d'].plot(kind='bar', )
    plt.ylim(-0.5, 0.5)
    plt.ylabel(category)
    plt.grid(True)
    plt.show()
    
    return

def category_vs_target(train, category_features, target, topN=30, test=None):
    """
    
    plot category vs target(binary)
    'train' must have target
    
    """
    
    plt.subplots_adjust(wspace=2, hspace=5)
    
    for category in category_features:
        
        plt.figure(figsize=(10,5))
        
        tmp = pd.concat([train[category].value_counts(), 
                         train.groupby(category)[target].mean()], axis=1)
        tmp.columns = ['freq', 'target_mean']
    
        tmp.sort_values('freq', ascending=False, inplace=True)
        tmp = tmp.head(topN)
        
        m, n = tmp.shape
        
        if test is not None:
            ax1 = plt.subplot(1, 2, 1)
        else:
            fig, ax1 = plt.subplots()
        ax2 = ax1.twinx()
        
        # plot frequency
        ax1.bar(range(m), 
                tmp.freq, 
                tick_label=tmp.index,
                label='frequency',
                )
        ax1.grid(True)
        ax1.set_xticklabels(tmp.index, rotation=90)
        ax1.set_ylabel(category)
        ax1.legend(bbox_to_anchor=(1.07,1), loc='upper left')
        # ax1.set_yticklabels(ax1.get_yticks())
        
        # plot target mean
        ax2.plot(range(m),
                 tmp['target_mean'],
                 ls='--',
                 marker='o',
                 color='r',
                 label='target mean',
                 )
        ax2.set_ylim(0, 1)
        ax2.set_ylabel(target)
        ax2.legend(bbox_to_anchor=(1.07,0.9), loc='upper left')
        
        plt.title('train')
        
        if test is not None and isinstance(test, pd.DataFrame):
            plt.subplot(1, 2, 2) # for test
            x_index = tmp.index
            tmp = test[category].value_counts()
            di = tmp[tmp.index.isin(x_index)].to_dict()
            y_index = [di.get(k, 0) for k in x_index]
            plt.bar(range(m), y_index, tick_label=x_index)
            plt.xticks(rotation=90)
            plt.title('test')
            plt.grid(True)
            
        elif test is None:
            pass
        
        else:
            raise Exception(type(test))
        plt.show()
            
    return

# =============================================================================
# continuous
# =============================================================================
def hist_continuous(df, continuous_features, bins=30, df2=None):
    
    for c in continuous_features:
        if df2 is not None:
            plt.subplot(1, 2, 1)
        df[c].hist(bins=bins)
        
        if df2 is not None:
            plt.subplot(1, 2, 2)
            df2[c].hist(bins=bins)
            
        if df2 is not None:
            plt.suptitle(f'{c}', size=25)
        else:
            plt.title(f'{c}', size=25)
        plt.tight_layout()
        plt.show()
        
    return

def split_seq(iterable, size):
    """
    In: list(split_seq(range(9), 4))
    Out: [[0, 1, 2, 3], [4, 5, 6, 7], [8]]
    """
    it = iter(iterable)
    item = list(itertools.islice(it, size))
    while item:
        yield item
        item = list(itertools.islice(it, size))
