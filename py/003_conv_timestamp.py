#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 30 15:10:51 2019

@author: kazuki.onodera

external data were downloaded below links

https://www.kaggle.com/cdeotte/malware-timestamps
https://www.kaggle.com/cdeotte/malware-timestamps-2

"""

import numpy as np
import pandas as pd
from datetime import datetime
#from multiprocessing import cpu_count, Pool

import utils


PREF = 'f003'


col_cat = ['ProductName',
         'EngineVersion',
         'AppVersion',
         'AvSigVersion',
         'Platform',
         'Processor',
         'OsVer',
         'OsPlatformSubRelease',
         'OsBuildLab',
         'SkuEdition',
         'PuaMode',
         'SmartScreen',
         'Census_MDC2FormFactor',
         'Census_DeviceFamily',
         'Census_ProcessorClass',
         'Census_PrimaryDiskTypeName',
         'Census_ChassisTypeName',
         'Census_PowerPlatformRoleName',
         'Census_InternalBatteryType',
         'Census_OSVersion',
         'Census_OSArchitecture',
         'Census_OSBranch',
         'Census_OSEdition',
         'Census_OSSkuName',
         'Census_OSInstallTypeName',
         'Census_OSWUAutoUpdateOptionsName',
         'Census_GenuineStateName',
         'Census_ActivationChannel',
         'Census_FlightRing']


# =============================================================================
# main
# =============================================================================
if __name__ == "__main__":
    utils.start(__file__)
    
    tr = pd.read_feather('../data/train.f')[col_cat]
    te = pd.read_feather('../data/test.f')[col_cat]
    
    tr_f = pd.DataFrame(index=tr.index)
    te_f = pd.DataFrame(index=te.index)
    
    # AS timestamp
    datedictAS = np.load('../external/AvSigVersionTimestamps.npy')[()]
    tr_f['AvSigVersion'] = tr['AvSigVersion'].map(datedictAS)
    te_f['AvSigVersion'] = te['AvSigVersion'].map(datedictAS)
    
    # OS timestamp
    datedictOS = np.load('../external/OSVersionTimestamps.npy')[()]
    tr_f['Census_OSVersion'] = tr['Census_OSVersion'].map(datedictOS)
    te_f['Census_OSVersion'] = te['Census_OSVersion'].map(datedictOS)
    
    # BL timestamp
    def convert(x):
        try:
            d = datetime.strptime(x.split('.')[4],'%y%m%d-%H%M')
        except:
            d = np.nan
        return d
    
    tr_f['OsBuildLab'] = tr['OsBuildLab'].map(convert)
    te_f['OsBuildLab'] = te['OsBuildLab'].map(convert)
    
    
    # time delta
    tr_f['AvSigVersion-d-Census_OSVersion'] = (tr_f['AvSigVersion']     - tr_f['Census_OSVersion']).dt.days
    tr_f['Census_OSVersion-d-OsBuildLab']   = (tr_f['Census_OSVersion'] - tr_f['OsBuildLab']).dt.days
    te_f['AvSigVersion-d-Census_OSVersion'] = (te_f['AvSigVersion']     - te_f['Census_OSVersion']).dt.days
    te_f['Census_OSVersion-d-OsBuildLab']   = (te_f['Census_OSVersion'] - te_f['OsBuildLab']).dt.days
    
    # min max
    col = ['AvSigVersion', 'Census_OSVersion', 'OsBuildLab']
    tr_f['date_min'] = tr_f[col].min(1)
    tr_f['date_max'] = tr_f[col].max(1)
    te_f['date_min'] = te_f[col].min(1)
    te_f['date_max'] = te_f[col].max(1)
    tr_f['date_max-d-min'] = (tr_f['date_max']     - tr_f['date_min']).dt.days
    te_f['date_max-d-min'] = (te_f['date_max']     - te_f['date_min']).dt.days
    
    # save dt
    tr[['AvSigVersion', 'Census_OSVersion', 'OsBuildLab']].to_feather('../data/train_datetime.f')
    te[['AvSigVersion', 'Census_OSVersion', 'OsBuildLab']].to_feather('../data/test_datetime.f')
    
    # into int64
    for c in ['AvSigVersion', 'Census_OSVersion', 'OsBuildLab', 'date_min', 'date_max']:
        tr_f[c]     = tr_f[c].astype(np.int64) // 10**9
        tr_f.loc[tr_f[c]<0, c] = np.nan
        te_f[c]     = te_f[c].astype(np.int64) // 10**9
        te_f.loc[te_f[c]<0, c] = np.nan
    
    utils.reduce_mem_usage(tr_f)
    utils.reduce_mem_usage(te_f)
    
    # output
    tr_f.add_prefix(PREF+'_').to_feather(f'../data/train_{PREF}.f')
    te_f.add_prefix(PREF+'_').to_feather(f'../data/test_{PREF}.f')
    
    
    
    utils.end(__file__)
    
    
    