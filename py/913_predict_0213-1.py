#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb  9 21:50:40 2019

@author: Kazuki

cp LOG/imp_801_cv.py.csv LOG/imp_used_0213-1.csv


"""

import numpy as np
import pandas as pd
import os, gc
from glob import glob
from tqdm import tqdm

import sys
sys.path.append(f'/home/{os.environ.get("USER")}/PythonLibrary')
import lgbextension as ex
import lightgbm as lgb
from multiprocessing import cpu_count

from sklearn.metrics import roc_auc_score

import utils , utils_cat
utils.start(__file__)
#==============================================================================

SUBMIT_FILE_PATH = '../output/0213-1.csv.gz'

COMMENT = 'nejumi + f003~5'

EXE_SUBMIT = False

SEED = np.random.randint(9999)
#SEED = 71
print('SEED:', SEED)


param = {
         'objective': 'binary',
         'metric': 'auc',
         
         'learning_rate': 0.05,
         'max_depth': -1,
         'num_leaves': 2**12 -1,
         'max_bin': 127,
         
         'min_child_weight': 10,
         'min_data_in_leaf': 150,
         'reg_lambda': 0.5,  # L2 regularization term on weights.
         'reg_alpha': 0.5,  # L1 regularization term on weights.
         
         'colsample_bytree': 0.8,
         'subsample': 0.8,
#         'nthread': 32,
         'nthread': cpu_count(),
         'bagging_freq': 1,
         'verbose':-1,
         }

NROUND = 17329
VERBOSE_EVAL = 100

IMP_FILE = 'LOG/imp_used_0213-1.csv'
USE_PREF = ['f003', 'f004', 'f005', 'f701']

RESULT_DICT = {}
RESULT_DICT['file'] = SUBMIT_FILE_PATH


# =============================================================================
# load
# =============================================================================
imp = pd.read_csv(IMP_FILE)
COL = imp[imp['total']>0].feature.tolist()
#COL = imp.feature.tolist()

files_tr = sorted(glob('../data/train_f*.f'))

# USE_PREF
li = []
for i in files_tr:
    for j in USE_PREF:
        if j in i:
            li.append(i)
            break
files_tr = li

[print(i,f) for i,f in enumerate(files_tr)]

X_train = pd.concat([
                pd.read_feather(f) for f in tqdm(files_tr, mininterval=30)
               ], axis=1)[COL]
y_train = utils.load_target()['HasDetections']

if X_train.columns.duplicated().sum()>0:
    raise Exception(f'duplicated!: { X_train.columns[X_train.columns.duplicated()] }')
print('no dup :) ')
print(f'X_train.shape {X_train.shape}')

gc.collect()

CAT = list( set(X_train.columns)&set(utils_cat.ALL))
print(f'CAT: {CAT}')


#COL = X_train.columns.tolist()

RESULT_DICT['feature size'] = len(COL)
RESULT_DICT['category feature size'] = len(CAT)


# =============================================================================
# all sample
# =============================================================================


dtrain = lgb.Dataset(X_train, y_train.values, 
                     categorical_feature=CAT, 
                     free_raw_data=False)

gc.collect()


param['seed'] = np.random.randint(9999)
model = lgb.train(params=param, train_set=dtrain, 
                  num_boost_round=NROUND,
#                  valid_sets=[dtrain], 
#                  valid_names=['train'], 
#                  feval=ex.eval_auc,
#                  categorical_feature=CAT,
#                  verbose_eval=VERBOSE_EVAL
                  )

imp = ex.getImp(model)
imp['split'] /= imp['split'].max()
imp['gain'] /= imp['gain'].max()
imp['total'] = imp['split'] + imp['gain']
imp.sort_values('total', ascending=False, inplace=True)
imp.reset_index(drop=True, inplace=True)


imp.to_csv(f'LOG/imp_{__file__}.csv', index=False)
utils.savefig_imp(imp, f'LOG/imp_{__file__}.png', x='total')

RESULT_DICT['nfold'] = '-'
RESULT_DICT['seed'] = SEED
RESULT_DICT['eta'] = param['learning_rate']
RESULT_DICT['NROUND'] = NROUND
#RESULT_DICT['train AUC'] = model.best_score['train']['auc']


del dtrain, X_train, y_train; gc.collect()


# =============================================================================
# test
# =============================================================================


files_te = sorted(glob('../data/test_f*.f'))

# USE_PREF
li = []
for i in files_te:
    for j in USE_PREF:
        if j in i:
            li.append(i)
            break
files_te = li

[print(i,f) for i,f in enumerate(files_te)]

X_test = pd.concat([
                pd.read_feather(f) for f in tqdm(files_te, mininterval=30)
               ], axis=1)[COL]


if X_test.columns.duplicated().sum()>0:
    raise Exception(f'duplicated!: { X_test.columns[X_test.columns.duplicated()] }')
print('no dup :) ')
print(f'X_test.shape {X_test.shape}')


y_pred = pd.Series(model.predict(X_test)).rank()


sub = pd.read_csv('../input/sample_submission.csv.zip')
sub['HasDetections'] = y_pred.values


print('corr with best')
sub_best = pd.read_csv(utils.SUB_BEST)
print(sub['HasDetections'].corr( sub_best['HasDetections'], method='spearman') )

#print('corr with all subs')
#for file in utils.SUB_CORR:
#    tmp = pd.read_csv(file)
#    corr = sub['HasDetections'].corr( tmp['HasDetections'], method='spearman')
#    print(f'{file}: {corr:.5f}')



print("""
# =============================================================================
# write down these info to benchmark.xlsx
# =============================================================================
""")

[print(f'{k:<25}: {RESULT_DICT[k]}') for k in RESULT_DICT]

print("""
# =============================================================================
""")




# save
sub.to_csv(SUBMIT_FILE_PATH, index=False, compression='gzip')


# =============================================================================
# submission
# =============================================================================
if EXE_SUBMIT:
    print('submit')
    utils.submit(SUBMIT_FILE_PATH, COMMENT)




#==============================================================================
utils.end(__file__)
utils.stop_instance()

