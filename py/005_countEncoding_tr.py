#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 24 17:41:39 2019

@author: kazuki.onodera

trainのみでencoding


"""

import numpy as np
import pandas as pd
import gc, os
from glob import glob

from multiprocessing import cpu_count, Pool
#from sklearn.preprocessing import LabelEncoder

import utils

PREF = 'f005'


col_cat = [
         'ProductName',                              # cardinality(6, 6), same distribuyion
         'EngineVersion',                           # maybe time series
         'AppVersion',                              # maybe time series
         'AvSigVersion',                            # maybe time series
         'DefaultBrowsersIdentifier',               # cardinality(1730, 1548)
         'AVProductStatesIdentifier',               # cardinality(28970, 23492)
         'CountryIdentifier',                        # cardinality(222, 222)
         'CityIdentifier',                           # cardinality(107366, 105817)
         'OrganizationIdentifier',                   # cardinality(49, 50)
         'GeoNameIdentifier',                        # cardinality(292, 289)
         'LocaleEnglishNameIdentifier',              # cardinality(276, 278)
         'Platform',                                 # cardinality(4, 4)
         'Processor',                                # cardinality(3, 3)
         'OsVer',                                   # cardinality(58, 44) maybe time series
         'OsPlatformSubRelease',                     # cardinality(58, 44)
         'OsBuildLab',                              # cardinality(663, 673)
         'SkuEdition',                               # cardinality(8, 8)
         'IeVerIdentifier',                         # cardinality(303, 294) maybe time series
         'SmartScreen',                              # cardinality(21, 21)
         'Census_MDC2FormFactor',                    # cardinality(13, 14)
         'Census_DeviceFamily',                      # cardinality(3, 3)
         'Census_OEMNameIdentifier',                # cardinality(3832, 3685)
         'Census_OEMModelIdentifier',               # cardinality(175365, 167776)
         'Census_ProcessorManufacturerIdentifier',   # cardinality(7, 7)
         'Census_ProcessorModelIdentifier',          # cardinality(3428, 3438)
         'Census_ProcessorClass',                    # cardinality(3, 3)
         'Census_PrimaryDiskTypeName',               # cardinality(4, 4)
         'Census_ChassisTypeName',                   # cardinality(52, 48)
         'Census_PowerPlatformRoleName',             # cardinality(10, 10)
         'Census_InternalBatteryType',               # cardinality(78, 63)
         'Census_OSVersion',                        # cardinality(469, 475)
         'Census_OSArchitecture',                    # cardinality(3, 3)
         'Census_OSBranch',                          # cardinality(32, 29)
         'Census_OSEdition',                         # cardinality(33, 36)
         'Census_OSSkuName',                         # cardinality(30, 31)
         'Census_OSInstallTypeName',                 # cardinality(9, 9)
         'Census_OSInstallLanguageIdentifier',       # cardinality(39, 39)
         'Census_OSUILocaleIdentifier',              # cardinality(147, 139)
         'Census_OSWUAutoUpdateOptionsName',         # cardinality(6, 6)
         'Census_GenuineStateName',                  # cardinality(5, 5)
         'Census_ActivationChannel',                 # cardinality(6, 6)
         'Census_FlightRing',                        # cardinality(10, 11)
         'Census_FirmwareManufacturerIdentifier',    # cardinality(712, 722)
         'Census_FirmwareVersionIdentifier',         # cardinality(50494, 49811)
         'Wdft_RegionIdentifier',                    # cardinality(15, 15)
         
         'OsBuild',                                  # cardinality(58, 44)
         'OsSuite',                                  # cardinality(58, 44)
         
         'OsBuildLab_major',
         'OsBuildLab_minor',
         'OsBuildLab_build',
         'OsBuildLab_architecture',
         ]

def frequency_encoding(variable):
    """
    https://www.kaggle.com/fabiendaniel/detecting-malwares-with-lgbm
    """
    
    return tr[variable].value_counts().to_dict()

def multi(args):
    
    c, outpath_tr, outpath_te  = args
    
    tr_f = pd.DataFrame(index=tr.index)
    te_f = pd.DataFrame(index=te.index)
    
    # count train
    di = frequency_encoding(c)
    tr_f[c+'_tr'] = tr[c].map(lambda x: di.get(x, np.nan))
    te_f[c+'_tr'] = te[c].map(lambda x: di.get(x, np.nan))
    
    utils.reduce_mem_usage(tr_f)
    utils.reduce_mem_usage(te_f)
    
    # output
    tr_f.add_prefix(PREF+'_').to_feather(outpath_tr)
    te_f.add_prefix(PREF+'_').to_feather(outpath_te)
    
    return

# =============================================================================
# main
# =============================================================================
if __name__ == "__main__":
    utils.start(__file__)
    
    tr = pd.read_feather('../data/train.f')[col_cat]
    te = pd.read_feather('../data/test.f')[col_cat]
    
    trte = pd.concat([tr, te], ignore_index=True)
    
    os.system(f'rm ../data/tmp_*_{PREF}*')
    argss = []
    for i,c in enumerate(col_cat):
        argss.append([c, f'../data/tmp_tr_{PREF}_{c}.f', f'../data/tmp_te_{PREF}_{c}.f'])
    
    pool = Pool( cpu_count() )
    pool.map(multi, argss)
    pool.close()
    
    del tr, te, trte; gc.collect()
    
    # train
    df = pd.concat([pd.read_feather(f) for f in sorted(glob(f'../data/tmp_tr_{PREF}*'))], axis=1)
    df.to_feather(f'../data/train_{PREF}.f')
    del df; gc.collect()
    
    # test
    df = pd.concat([pd.read_feather(f) for f in sorted(glob(f'../data/tmp_te_{PREF}*'))], axis=1)
    df.to_feather(f'../data/test_{PREF}.f')
    
    os.system(f'rm ../data/tmp_*_{PREF}*')
    
    utils.end(__file__)
