"""


for f in sorted(glob('*.py')):
#    print(f'nohup python -u {f} 0 > LOG/log_{f}.txt &')
    print(f'python -u {f} > LOG/log_{f}.txt')

"""

import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import numpy as np
from glob import glob
import os
from socket import gethostname
HOSTNAME = gethostname()

from tqdm import tqdm
#from itertools import combinations
from sklearn.model_selection import KFold
from time import time, sleep
from datetime import datetime
from multiprocessing import cpu_count, Pool
import gc

# =============================================================================
# global variables
# =============================================================================

COMPETITION_NAME = 'microsoft-malware-prediction'

# for read
DTYPES = {
        #'MachineIdentifier':                                    'object',
        'ProductName':                                          'object',
        'EngineVersion':                                        'object',
        'AppVersion':                                           'object',
        'AvSigVersion':                                         'object',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int32',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float32',
        'LocaleEnglishNameIdentifier':                          'int32',
        'Platform':                                             'object',
        'Processor':                                            'object',
        'OsVer':                                                'object',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'object',
        'OsBuildLab':                                           'object',
        'SkuEdition':                                           'object',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'object',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float32',
        'SmartScreen':                                          'object',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float64',
        'Census_MDC2FormFactor':                                'object',
        'Census_DeviceFamily':                                  'object',
        'Census_OEMNameIdentifier':                             'float32',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32',
        'Census_ProcessorClass':                                'object',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'object',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'object',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32',
        'Census_PowerPlatformRoleName':                         'object',
        'Census_InternalBatteryType':                           'object',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'object',
        'Census_OSArchitecture':                                'object',
        'Census_OSBranch':                                      'object',
        'Census_OSBuildNumber':                                 'int32',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'object',
        'Census_OSSkuName':                                     'object',
        'Census_OSInstallTypeName':                             'object',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int32',
        'Census_OSWUAutoUpdateOptionsName':                     'object',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'object',
        'Census_ActivationChannel':                             'object',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'object',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float32',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float32',
        'HasDetections':                                        'int8'
    }

COL_BINARY = [
            'IsBeta',
            'IsSxsPassiveMode',
            'HasTpm',
            'IsProtected',
            'AutoSampleOptIn',
            'PuaMode',
            'SMode',
            'Firewall',
            'Census_HasOpticalDiskDrive',
            'Census_IsPortableOperatingSystem',
            'Census_IsFlightingInternal',
            'Census_IsFlightsDisabled',
            'Census_ThresholdOptIn',
            'Census_IsSecureBootEnabled',
            'Census_IsWIMBootEnabled',
            'Census_IsVirtualDevice',
            'Census_IsTouchEnabled',
            'Census_IsPenCapable',
            'Census_IsAlwaysOnAlwaysConnectedCapable',
            'Wdft_IsGamer',
            ]

COL_CAT = [
        'ProductName',
         'EngineVersion',
         'AppVersion',
         'AvSigVersion',
         'DefaultBrowsersIdentifier',
         'AVProductStatesIdentifier',
         'CountryIdentifier',
         'CityIdentifier',
         'OrganizationIdentifier',
         'GeoNameIdentifier',
         'LocaleEnglishNameIdentifier',
         'Platform',
         'Processor',
         'OsVer',
         'OsPlatformSubRelease',
         'OsBuildLab',
         'SkuEdition',
         'IeVerIdentifier',
         'SmartScreen',
         'Census_MDC2FormFactor',
         'Census_DeviceFamily',
         'Census_OEMNameIdentifier',
         'Census_OEMModelIdentifier',
         'Census_ProcessorManufacturerIdentifier',
         'Census_ProcessorModelIdentifier',
         'Census_ProcessorClass',
         'Census_PrimaryDiskTypeName',
         'Census_ChassisTypeName',
         'Census_PowerPlatformRoleName',
         'Census_InternalBatteryType',
         'Census_OSVersion',
         'Census_OSArchitecture',
         'Census_OSBranch',
         'Census_OSEdition',
         'Census_OSSkuName',
         'Census_OSInstallTypeName',
         'Census_OSInstallLanguageIdentifier',
         'Census_OSUILocaleIdentifier',
         'Census_OSWUAutoUpdateOptionsName',
         'Census_GenuineStateName',
         'Census_ActivationChannel',
         'Census_FlightRing',
         'Census_FirmwareManufacturerIdentifier',
         'Census_FirmwareVersionIdentifier',
         'Wdft_RegionIdentifier',
         
         'OsBuild',
         'OsSuite',
         
         'OsBuildLab_major',
         'OsBuildLab_minor',
         'OsBuildLab_build',
         'OsBuildLab_architecture',
         ]

COL_CONTINUOS = [
         'RtpStateBitfield',
         'AVProductsInstalled',
         'AVProductsEnabled',
#         'OsBuild', # -> COL_CAT
#         'OsSuite', # -> COL_CAT
         'UacLuaenable',
         'Census_ProcessorCoreCount',
         'Census_PrimaryDiskTotalCapacity',
         'Census_SystemVolumeTotalCapacity',
         'Census_TotalPhysicalRAM',
         'Census_InternalPrimaryDiagonalDisplaySizeInInches',
         'Census_InternalPrimaryDisplayResolutionHorizontal',
         'Census_InternalPrimaryDisplayResolutionVertical',
         'Census_InternalBatteryNumberOfCharges',
         'Census_OSBuildNumber',
         'Census_OSBuildRevision',
         
         'OsBuildLab_date',
         'OsBuildLab_time'
         ]




IMP_FILE = 'LOG/xxx.csv'

IMP_FILE_BEST = 'LOG/xxx.csv'

SUB_BEST = '../output/0228-5.csv.gz'
SUB_nejumi = '../external/nejumi_0.702.npy'


feature_0225_1 = ['f013_AVProductStatesIdentifier-EngineVersion-in-Census_OSVersion',
                  'f013_AVProductStatesIdentifier-AppVersion-in-Census_OSVersion', 
                  'f013_EngineVersion-AppVersion-in-Census_OSVersion', 
                  'f009_AVProductsInstalled-in-Census_OSVersion', 
                  'f013_SMode-AppVersion-in-Census_OSVersion', 
                  'f013_SMode-EngineVersion-in-Census_OSVersion', 
                  'f009_IsProtected-in-Census_OSVersion', 
                  'f013_AVProductStatesIdentifier-RtpStateBitfield-in-Census_OSVersion', 
                  'f009_Census_GenuineStateName-in-Census_OSVersion', 
                  'f013_Census_ActivationChannel-CountryIdentifier-in-Census_OSVersion', 
                  'f013_Census_OSInstallTypeName-AppVersion-in-Census_OSVersion', 
                  'f009_Census_OEMNameIdentifier-in-Census_OSVersion', 
                  'f013_AVProductStatesIdentifier-Wdft_RegionIdentifier-in-Census_OSVersion', 
                  'f013_AVProductStatesIdentifier-Wdft_IsGamer-in-Census_OSVersion',
                  'f009_Census_IsAlwaysOnAlwaysConnectedCapable-in-Census_OSVersion',
                  'f013_LocaleEnglishNameIdentifier-Wdft_RegionIdentifier-in-Census_OSVersion', 
                  'f009_Wdft_RegionIdentifier-in-Census_OSVersion', 
                  'f013_AVProductStatesIdentifier-Census_OSInstallTypeName-in-Census_OSVersion', 
                  'f013_AVProductStatesIdentifier-SMode-in-Census_OSVersion',
                  'f013_AVProductStatesIdentifier-Census_ActivationChannel-in-Census_OSVersion', 
                  'f013_RtpStateBitfield-AppVersion-in-Census_OSVersion', 
                  'f009_AVProductStatesIdentifier-in-Census_OSVersion', 
                  'f009_Census_PrimaryDiskTypeName-in-Census_OSVersion',
                  'f013_Wdft_IsGamer-EngineVersion-in-Census_OSVersion', 
                  'f009_Census_OSWUAutoUpdateOptionsName-in-Census_OSVersion', 
                  'f009_SkuEdition-in-Census_OSVersion', 
                  'f009_Census_PowerPlatformRoleName-in-Census_OSVersion',
                  'f009_DefaultBrowsersIdentifier-in-Census_OSVersion', 
                  'f013_Census_ActivationChannel-Wdft_RegionIdentifier-in-Census_OSVersion', 
                  'f009_Census_OSUILocaleIdentifier-in-Census_OSVersion', 
                  'f009_Firewall-in-Census_OSVersion', 
                  'f009_Census_IsVirtualDevice-in-Census_OSVersion',
                  'f013_Census_OSInstallTypeName-CountryIdentifier-in-Census_OSVersion', 
                  'f009_IeVerIdentifier-in-Census_OSVersion', 
                  'f013_RtpStateBitfield-Wdft_RegionIdentifier-in-Census_OSVersion', 
                  'f013_AppVersion-AvSigVersion-in-Census_OSVersion', 
                  'f013_CountryIdentifier-LocaleEnglishNameIdentifier-in-Census_OSVersion', 
                  'f009_Census_OSInstallLanguageIdentifier-in-Census_OSVersion', 
                  'f013_SMode-Wdft_RegionIdentifier-in-Census_OSVersion', 
                  'f009_Census_ActivationChannel-in-Census_OSVersion', 
                  'f009_AVProductsEnabled-in-Census_OSVersion',
                  'f013_Census_ActivationChannel-Census_OSInstallTypeName-in-Census_OSVersion', 
                  'f013_Census_OSInstallTypeName-SMode-in-Census_OSVersion', 
                  'f009_Census_FlightRing-in-Census_OSVersion',
                  'f013_Wdft_IsGamer-Wdft_RegionIdentifier-in-Census_OSVersion',
                  'f009_Census_FirmwareManufacturerIdentifier-in-Census_OSVersion', 
                  'f009_Census_MDC2FormFactor-in-Census_OSVersion',
                  'f013_Wdft_RegionIdentifier-EngineVersion-in-Census_OSVersion',
                  'f013_Wdft_RegionIdentifier-AppVersion-in-Census_OSVersion', 
                  'f013_Census_ActivationChannel-SMode-in-Census_OSVersion']




# =============================================================================
# def
# =============================================================================
def start(fname):
    global st_time
    st_time = time()
    print("""
#==============================================================================
# START!!! {}    PID: {}    time: {}
#==============================================================================
""".format( fname, os.getpid(), datetime.today() ))
    send_line(f'{HOSTNAME}  START {fname}  time: {elapsed_minute():.2f}min')
    return

def reset_time():
    global st_time
    st_time = time()
    return

def end(fname):
    print("""
#==============================================================================
# SUCCESS !!! {}
#==============================================================================
""".format(fname))
    print('time: {:.2f}min'.format( elapsed_minute() ))
    send_line(f'{HOSTNAME}  FINISH {fname}  time: {elapsed_minute():.2f}min')
    return

def elapsed_minute():
    return (time() - st_time)/60


def mkdir_p(path):
    try:
        os.stat(path)
    except:
        os.mkdir(path)

def to_feature(df, path):
    
    if df.columns.duplicated().sum()>0:
        raise Exception(f'duplicated!: { df.columns[df.columns.duplicated()] }')
    df.reset_index(inplace=True, drop=True)
    df.columns = [c.replace('/', '-').replace(' ', '-') for c in df.columns]
    for c in df.columns:
        df[[c]].to_feather(f'{path}_{c}.f')
    return

def to_pickles(df, path, split_size=3, inplace=True):
    """
    path = '../output/mydf'
    
    wirte '../output/mydf/0.p'
          '../output/mydf/1.p'
          '../output/mydf/2.p'
    
    """
    print(f'shape: {df.shape}')
    
    if inplace==True:
        df.reset_index(drop=True, inplace=True)
    else:
        df = df.reset_index(drop=True)
    gc.collect()
    mkdir_p(path)
    
    kf = KFold(n_splits=split_size)
    for i, (train_index, val_index) in enumerate(tqdm(kf.split(df))):
        df.iloc[val_index].to_pickle(f'{path}/{i:03d}.p')
    return

def read_pickles(path, col=None, use_tqdm=True):
    if col is None:
        if use_tqdm:
            df = pd.concat([ pd.read_pickle(f) for f in tqdm(sorted(glob(path+'/*'))) ])
        else:
            print(f'reading {path}')
            df = pd.concat([ pd.read_pickle(f) for f in sorted(glob(path+'/*')) ])
    else:
        df = pd.concat([ pd.read_pickle(f)[col] for f in tqdm(sorted(glob(path+'/*'))) ])
    return df


def to_pkl_gzip(df, path):
    df.to_pickle(path)
    os.system('rm ' + path + '.gz')
    os.system('gzip ' + path)
    return
    
def save_test_features(df):
    for c in df.columns:
        df[[c]].to_pickle(f'../feature/test_{c}.pkl')
    return

# =============================================================================
# 
# =============================================================================
def get_dummies(df):
    """
    binary would be drop_first
    """
    col = df.select_dtypes('O').columns.tolist()
    nunique = df[col].nunique()
    col_binary = nunique[nunique==2].index.tolist()
    [col.remove(c) for c in col_binary]
    df = pd.get_dummies(df, columns=col)
    df = pd.get_dummies(df, columns=col_binary, drop_first=True)
    df.columns = [c.replace(' ', '-') for c in df.columns]
    return df

def reduce_mem_usage(df):
    
    start_mem = df.memory_usage().sum() / 1024**2
    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))

    for col in df.columns:
        col_type = df[col].dtype
        if col_type != 'object' and col_type != 'datetime64[ns]':
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float32)  # feather-format cannot accept float16
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)
    
    end_mem = df.memory_usage().sum() / 1024**2
    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))
    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))
    return df



def savefig_imp(imp, path, x='gain', y='feature', n=30, title='Importance'):
    import matplotlib as mpl
    mpl.use('Agg')
    import seaborn as sns
    import matplotlib.pyplot as plt
    
    fig, ax = plt.subplots()
    # the size of A4 paper
    fig.set_size_inches(11.7, 8.27)
    sns.barplot(x=x, y=y, data=imp.head(n), label=x)
    plt.subplots_adjust(left=.4, right=.9)
    plt.title(title+' TOP{0}'.format(n), fontsize=20, alpha=0.8)
    plt.savefig(path)

# =============================================================================
# 
# =============================================================================

def load_train(col=None):
    if col is None:
        return pd.read_feather('../data/train.f')
    else:
        return pd.read_feather('../data/train.f')[col]

def load_test(col=None):
    if col is None:
        return pd.read_feather('../data/test.f')
    else:
        return pd.read_feather('../data/test.f')[col]

def load_target():
    return pd.read_feather('../data/target.f')

def load_sub():
    return pd.read_feather('../data/sub.f')

def load_sample():
    tr = pd.read_feather('../data/tr.f')
    te = pd.read_feather('../data/te.f')
    return tr, te

def savefig_sub(sub, path):
    import matplotlib as mpl
    mpl.use('Agg')
    import seaborn as sns
    import matplotlib.pyplot as plt
    
    sub.iloc[:, 1:].hist(bins=50, figsize=(16, 12))
    plt.savefig(path)

# =============================================================================
# other API
# =============================================================================
def submit(file_path, comment='from API'):
    os.system(f'kaggle competitions submit -c {COMPETITION_NAME} -f {file_path} -m "{comment}"')
    sleep(60*2) # tekito~~~~
    tmp = os.popen(f'kaggle competitions submissions -c {COMPETITION_NAME} -v | head -n 2').read()
    col, values = tmp.strip().split('\n')
    message = 'SCORE!!!\n'
    for i,j in zip(col.split(','), values.split(',')):
        message += f'{i}: {j}\n'
    send_line(message.rstrip())

import requests
def send_line(message, png=None):
    
    line_notify_token = 'TvI8Rp8tQoe7V0UxhGNWDcVAwMsAo9nG3j2OAJm5Avg'
    line_notify_api = 'https://notify-api.line.me/api/notify'
    
    payload = {'message': message}
    headers = {'Authorization': 'Bearer ' + line_notify_token}
    
    if png is None:
        requests.post(line_notify_api, data=payload, headers=headers)
    elif png is not None and png.endswith('.png'):
        files = {"imageFile": open(png, "rb")}
        requests.post(line_notify_api, data=payload, headers=headers, files=files)
    else:
        raise Exception('???', png)
    print(message)

def stop_instance():
    """
    You need to login first.
    >> gcloud auth login
    """
    send_line('stop instance')
    os.system(f'gcloud compute instances stop {os.uname()[1]} --zone us-east1-b')
    
    
