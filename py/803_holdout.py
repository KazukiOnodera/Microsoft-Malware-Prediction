#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 31 18:44:43 2019

@author: kazuki.onodera
"""

import numpy as np
import pandas as pd
import os, gc
from glob import glob
from tqdm import tqdm

import sys
sys.path.append(f'/home/{os.environ.get("USER")}/PythonLibrary')
import lgbextension as ex
import lightgbm as lgb
from multiprocessing import cpu_count

from sklearn.metrics import roc_auc_score

import utils , utils_cat
utils.start(__file__)
#==============================================================================

SEED = np.random.randint(9999)
print('SEED:', SEED)


DROP = [
        'f002_EngineVersion', 'f002_AvSigVersion',
        
        'f003_AvSigVersion', 'f003_OsBuildLab', 'f003_Census_OSVersion',
        'f003_date_min', 'f003_date_max'
        ]

NFOLD = 5

LOOP = 1

param = {
         'objective': 'binary',
         'metric': 'None',
         
         'learning_rate': 0.1,
         'max_depth': 5,
         'num_leaves': 2**6 -1,
         'max_bin': 127,
         
         'min_child_weight': 10,
         'min_data_in_leaf': 150,
         'reg_lambda': 0.5,  # L2 regularization term on weights.
         'reg_alpha': 0.5,  # L1 regularization term on weights.
         
         'colsample_bytree': 0.5,
         'subsample': 0.7,
#         'nthread': 32,
         'nthread': cpu_count(),
         'bagging_freq': 1,
         'verbose':-1,
         }

ESR = 50
VERBOSE_EVAL = 25

USE_PREF = ['f001', 'f002', 'f003', 'f009']

TRAIN_TH = 0.6
VALID_TH = 0.8

# =============================================================================
# load
# =============================================================================

files_tr = sorted(glob('../data/train_f*.f'))

# USE_PREF
li = []
for i in files_tr:
    for j in USE_PREF:
        if j in i:
            li.append(i)
            break
files_tr = li

[print(i,f) for i,f in enumerate(files_tr)]

X_train = pd.concat([
                pd.read_feather(f) for f in tqdm(files_tr, mininterval=60)
               ], axis=1)
y_train = utils.load_target()['HasDetections']

X_train.drop(DROP, axis=1, inplace=True)


adv = pd.read_csv('../data/oof_802_adv.py.csv').iloc[:8921483].oof
adv_th = adv.quantile(VALID_TH)

X_valid = X_train[adv>adv.quantile(VALID_TH)]
y_valid = y_train[adv>adv.quantile(VALID_TH)]

X_train = X_train[adv<=adv.quantile(TRAIN_TH)]
y_train = y_train[adv<=adv.quantile(TRAIN_TH)]

if X_train.columns.duplicated().sum()>0:
    raise Exception(f'duplicated!: { X_train.columns[X_train.columns.duplicated()] }')
print('no dup :) ')
print(f'X_train.shape {X_train.shape}')
print(f'X_valid.shape {X_valid.shape}')

gc.collect()

CAT = list( set(X_train.columns)&set(utils_cat.ALL))
print(f'CAT: {CAT}')


# =============================================================================
# hold out
# =============================================================================


dtrain = lgb.Dataset(X_train, y_train.values, 
                     categorical_feature=CAT, 
                     free_raw_data=False)

dvalid = lgb.Dataset(X_valid, y_valid.values, 
                     categorical_feature=CAT, 
                     free_raw_data=False)
gc.collect()




model = lgb.train(params=param, train_set=dtrain, num_boost_round=9999, 
                  valid_sets=[dtrain, dvalid], 
                  valid_names=['train','valid'], 
                  feval=ex.eval_auc,
                  categorical_feature=CAT, 
                  early_stopping_rounds=ESR,
                  verbose_eval=VERBOSE_EVAL)



imp = ex.getImp(model)
imp['split'] /= imp['split'].max()
imp['gain'] /= imp['gain'].max()
imp['total'] = imp['split'] + imp['gain']
imp.sort_values('total', ascending=False, inplace=True)
imp.reset_index(drop=True, inplace=True)


#for i,y_pred in enumerate(y_preds):
#    if i==0:
#        oof = y_pred
#    else:
#        oof += y_pred
#oof /= len(y_preds)


imp.to_csv(f'LOG/imp_{__file__}.csv', index=False)
utils.savefig_imp(imp, f'LOG/imp_{__file__}.png', x='total')

# =============================================================================
# feature size
# =============================================================================

# imp = pd.read_csv('LOG/imp_803_holdout.py.csv')

COL = imp.feature.tolist()

#ex.stepwise(param, X_train, y_train, COL, COL[:10], 
#            X_valid, y_valid,
#            eval_key='auc', feval=ex.eval_auc,
#            best_score=0, categorical_feature=CAT,
#            esr=ESR, verbose_eval=VERBOSE_EVAL)

score_best = 0

for i in np.arange(50, 250, 20):
    print(f'\n==== feature size: {i} ====')
    gc.collect()
    y_preds = []
    
    X_train_ = X_train[COL[:i]]
    X_valid_ = X_valid[COL[:i]]
    
    dtrain = lgb.Dataset(X_train_, y_train.values)
    dvalid = lgb.Dataset(X_valid_, y_valid.values)
    cat = list( set(CAT) & set(X_train_.columns) )
    for j in range(LOOP):
        param['seed'] = np.random.randint(9999)
        
        model = lgb.train(params=param, train_set=dtrain, num_boost_round=9999, 
                          valid_sets=[dtrain, dvalid], 
                          valid_names=['train','valid'], 
                          feval=ex.eval_auc,
                          categorical_feature=cat, 
                          early_stopping_rounds=ESR,
                          verbose_eval=VERBOSE_EVAL)
        
    score = model.best_score['valid']['auc']
    print(score)
    if score > score_best:
        score_best = score
        best_feature_size = i

print('best feature size', best_feature_size)






#==============================================================================
utils.end(__file__)
#utils.stop_instance()

