#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 19 17:54:32 2019

@author: kazuki.onodera
"""

import numpy as np
import pandas as pd
from tqdm import tqdm
from sklearn.externals import joblib
import os, gc
from itertools import combinations

import utils
utils.start(__file__)

PREF = 'f008'

#os.system(f'rm -rf ../data/{PREF}')
#os.system(f'mkdir  ../data/{PREF}')

alpha = 0.5
min_samples_leaf = 10
smooth_coeff = 1.0
impute = True
comb_range = (0, 400)


# Encodingの対象とするcategorical
categorical_wo_version = [
                         'Census_OSUILocaleIdentifier',
                         'AVProductsInstalled',
                         'Census_FirmwareVersionIdentifier',
                         'Wdft_IsGamer',
                         'Census_ThresholdOptIn',
                         'RtpStateBitfield',
                         'Census_IsSecureBootEnabled',
                         'AVProductsEnabled',
                         'HasTpm',
                         'IsProtected',
                         'Census_PrimaryDiskTypeName',
                         'PuaMode',
                         'DefaultBrowsersIdentifier',
                         'IsSxsPassiveMode',
                         'OrganizationIdentifier',
                         'Census_IsAlwaysOnAlwaysConnectedCapable',
                         'ProductName',
                         'GeoNameIdentifier',
                         'Census_IsVirtualDevice',
                         'Census_PowerPlatformRoleName',
                         'Census_IsTouchEnabled',
                         'Census_OSSkuName',
                         'OsPlatformSubRelease',
                         'Census_FlightRing',
                         'Census_OSEdition',
                         'Census_IsPortableOperatingSystem',
                         'Firewall',
                         'OsBuildLab',
                         'Census_DeviceFamily',
                         'Census_IsPenCapable',
                         'SMode',
                         'Platform',
                         'Census_IsFlightingInternal',
                         'Census_OEMNameIdentifier',
                         'Census_InternalBatteryType',
                         'OsBuild',
                         'Census_HasOpticalDiskDrive',
                         'Census_IsWIMBootEnabled',
                         'Census_OSBuildRevision',
                         'CityIdentifier',
                         'IeVerIdentifier',
                         'Census_ProcessorClass',
                         'OsSuite',
                         'Census_IsFlightsDisabled',
                         'Census_ChassisTypeName',
                         'LocaleEnglishNameIdentifier',
                         'Census_OSArchitecture',
                         'CountryIdentifier',
                         'Census_OSInstallLanguageIdentifier',
                         'Census_OSInstallTypeName',
                         'Census_OSBuildNumber',
                         'AutoSampleOptIn',
                         'OsVer',
                         'SkuEdition',
                         'UacLuaenable',
                         'Census_OEMModelIdentifier',
                         'Census_OSBranch',
                         'Processor',
                         'Census_ProcessorModelIdentifier',
                         'Census_ActivationChannel',
                         'IsBeta',
                         'Census_MDC2FormFactor',
                         'Census_OSWUAutoUpdateOptionsName',
                         'AVProductStatesIdentifier',
                         'Census_GenuineStateName',
                         'Census_FirmwareManufacturerIdentifier',
                         'Wdft_RegionIdentifier',
                         'Census_ProcessorManufacturerIdentifier',  
                         'OsBuildLab_major',
                         'OsBuildLab_minor',
                         'OsBuildLab_build',
                         'OsBuildLab_architecture',
                         ]


X_train = pd.read_feather('../data/train.f')[categorical_wo_version]
X_test = pd.read_feather('../data/test.f')[categorical_wo_version]

# TargetEncodingされたSmartScreenで他のカテゴリカル変数をTargetEncodingしている。
pseudoTarget = 'SmartScreen'
X_train[pseudoTarget] = joblib.load('../external/X_train_nejumi.pkl.gz')[pseudoTarget]
X_test[pseudoTarget] = joblib.load('../external/X_test_nejumi.pkl.gz')[pseudoTarget]

tr_f = pd.DataFrame(index=X_train.index)
te_f = pd.DataFrame(index=X_test.index)

comb = list(combinations(categorical_wo_version, 2))[comb_range[0]:comb_range[1]] # len(comb)==2556

for col in tqdm(comb):
    gc.collect()
    col = list(col)
    global_mean = (1-alpha)*X_train[pseudoTarget].astype(float).mean() + alpha*X_test[pseudoTarget].astype(float).mean()
    summary = (1-alpha)*X_train[col+[pseudoTarget]].groupby(col)[pseudoTarget].agg(['mean', 'count']) + alpha*X_test[col+[pseudoTarget]].groupby(col)[pseudoTarget].agg(['mean', 'count'])
    
    smoove = 1 / (1 + np.exp(-(summary['count'] - min_samples_leaf) / smooth_coeff))
    smoothing = global_mean * (1 - smoove) + summary['mean'] * smoove
    smoothing[summary['count'] == 1] = global_mean
    smoothing = smoothing.to_frame()
    
    tr_f['-'.join(col)] = pd.merge(X_train[col], smoothing, on=col, how='left')[0]
    te_f['-'.join(col)] = pd.merge(X_test[col], smoothing, on=col, how='left')[0]
    
    if impute == True:
        tr_f['-'.join(col)].fillna(global_mean, inplace=True)
        te_f['-'.join(col)].fillna(global_mean, inplace=True)

gc.collect()

del X_train, X_test

utils.reduce_mem_usage(tr_f)
utils.reduce_mem_usage(te_f)

tr_f.add_prefix(PREF+'_').to_feather(f'../data/{PREF}/train_{PREF}.f')
te_f.add_prefix(PREF+'_').to_feather(f'../data/{PREF}/test_{PREF}.f')





utils.end(__file__)


