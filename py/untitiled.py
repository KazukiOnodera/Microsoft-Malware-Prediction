#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb  2 11:12:40 2019

@author: Kazuki
"""

import numpy as np
import pandas as pd
import os
from sklearn.metrics import roc_auc_score
import utils


tr = pd.read_feather('../data/train.f')
y_train = utils.load_target()['HasDetections']

te = pd.read_feather('../data/test.f')



# =============================================================================
# 0.43099 -> 0.046616, AUC ->
# =============================================================================
key = 'EngineVersion'
val = '1.1.15200.1'


print( ((tr[key]==val)*1).value_counts(normalize=True) )
print( ((te[key]==val)*1).value_counts(normalize=True) )


# =============================================================================
# 0.013484 -> 0.394907, AUC 0.49980 -> 0.548
# =============================================================================
key = 'EngineVersion'
val = '1.1.15300.6'


print( ((tr[key]==val)*1).value_counts(normalize=True) )
print( roc_auc_score(y_train, ((tr[key]==val)*1)) )
print( ((te[key]==val)*1).value_counts(normalize=True) )



# =============================================================================
# 0.00154 -> 0.348737, AUC 0.49999 -> 0.549
# =============================================================================
key = 'AppVersion'
val = '4.18.1809.2'


print( ((tr[key]==val)*1).value_counts(normalize=True) )
print( roc_auc_score(y_train, ((tr[key]==val)*1)) )
print( ((te[key]==val)*1).value_counts(normalize=True) )



# =============================================================================
# 0.117266 -> 0.076458, AUC 0.572134 -> 0.537
# =============================================================================
key = 'SmartScreen'
val = 'ExistsNotSet'


print( ((tr[key]==val)*1).value_counts(normalize=True) )
print( roc_auc_score(y_train, ((tr[key]==val)*1)) )
print( ((te[key]==val)*1).value_counts(normalize=True) )


# =============================================================================
# 
# =============================================================================

# AS timestamp
datedictAS = np.load('../external/AvSigVersionTimestamps.npy')[()]
tr['AvSigVersion_datetime'] = tr['AvSigVersion'].map(datedictAS)
te['AvSigVersion_datetime'] = te['AvSigVersion'].map(datedictAS)

#tr.sort_values('AvSigVersion_datetime', inplace=True)


# =============================================================================
# 
# =============================================================================
timeseries = 'AvSigVersion'

tr[f'{timeseries}_date'] = tr[f'{timeseries}_datetime'].dt.date



tr.groupby([f'{timeseries}_date', 'EngineVersion']).size()



pd.crosstab(tr[f'{timeseries}_date'], tr['EngineVersion'], normalize='index')



