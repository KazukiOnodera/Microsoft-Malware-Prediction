#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 15 13:44:43 2019

@author: kazuki.onodera
"""

import numpy as np
import pandas as pd
from tqdm import tqdm
from sklearn.externals import joblib
import os, gc

import utils
utils.start(__file__)

PREF = 'f006'

categorical_w_version = [
     'EngineVersion',
     'AppVersion',
     'AvSigVersion',
     'Census_OSVersion',
         ]

X_train = pd.read_feather('../data/train.f')[categorical_w_version]
X_test = pd.read_feather('../data/test.f')[categorical_w_version]

# TargetEncodingされたSmartScreenで他のカテゴリカル変数をTargetEncodingしている。
pseudoTarget = 'SmartScreen'
X_train[pseudoTarget] = joblib.load('../external/X_train_nejumi.pkl.gz')[pseudoTarget]
X_test[pseudoTarget] = joblib.load('../external/X_test_nejumi.pkl.gz')[pseudoTarget]

alpha = 0.5
min_samples_leaf = 10
smooth_coeff = 1.0
impute = True

for col in tqdm(categorical_w_version):
    
    global_mean = (1-alpha)*X_train[pseudoTarget].astype(float).mean() + alpha*X_test[pseudoTarget].astype(float).mean()
    summary = (1-alpha)*X_train[[col, pseudoTarget]].groupby([col])[pseudoTarget].agg(['mean', 'count']) + alpha*X_test[[col, pseudoTarget]].groupby([col])[pseudoTarget].agg(['mean', 'count'])
    
    smoove = 1 / (1 + np.exp(-(summary['count'] - min_samples_leaf) / smooth_coeff))
    smoothing = global_mean * (1 - smoove) + summary['mean'] * smoove
    smoothing[summary['count'] == 1] = global_mean 
    
    X_train[col] = X_train[col].map(smoothing)
    X_test[col] = X_test[col].map(smoothing)
    
    if impute == True:
        X_train[col].fillna(global_mean, inplace=True)
        X_test[col].fillna(global_mean, inplace=True)

gc.collect()

X_train.to_feather(f'../data/train_{PREF}.f')
X_test.to_feather(f'../data/test_{PREF}.f')





utils.end(__file__)


