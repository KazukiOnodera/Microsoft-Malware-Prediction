#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  7 00:17:36 2019

@author: Kazuki
"""

import numpy as np
import pandas as pd
import gc, os
from glob import glob
from multiprocessing import cpu_count, Pool
import utils

PREF = 'f014'

funcs = ['min', 'mean', 'max', 'std', 'skew']

num_agg = {
         'RtpStateBitfield': funcs,
         'AVProductsInstalled': funcs,
         'AVProductsEnabled': funcs,
         'UacLuaenable': funcs,
         'Census_ProcessorCoreCount': funcs,
         'Census_PrimaryDiskTotalCapacity': funcs,
         'Census_SystemVolumeTotalCapacity': funcs,
         'Census_TotalPhysicalRAM': funcs,
         'Census_InternalPrimaryDiagonalDisplaySizeInInches': funcs,
         'Census_InternalPrimaryDisplayResolutionHorizontal': funcs,
         'Census_InternalPrimaryDisplayResolutionVertical': funcs,
         'Census_InternalBatteryNumberOfCharges': funcs,
         'Census_OSBuildNumber': funcs,
         'Census_OSBuildRevision': funcs,
         
         }

COL_CAT = [
        'ProductName',
         'EngineVersion',
         'AppVersion',
         'AvSigVersion',
         'DefaultBrowsersIdentifier',
         'AVProductStatesIdentifier',
         'CountryIdentifier',
         'CityIdentifier',
         'OrganizationIdentifier',
         'GeoNameIdentifier',
         'LocaleEnglishNameIdentifier',
         'Platform',
         'Processor',
         'OsVer',
         'OsPlatformSubRelease',
         'OsBuildLab',
         'SkuEdition',
         'IeVerIdentifier',
         'SmartScreen',
         'Census_MDC2FormFactor',
         'Census_DeviceFamily',
         'Census_OEMNameIdentifier',
         'Census_OEMModelIdentifier',
         'Census_ProcessorManufacturerIdentifier',
         'Census_ProcessorModelIdentifier',
         'Census_ProcessorClass',
         'Census_PrimaryDiskTypeName',
         'Census_ChassisTypeName',
         'Census_PowerPlatformRoleName',
         'Census_InternalBatteryType',
         'Census_OSVersion',
         'Census_OSArchitecture',
         'Census_OSBranch',
         'Census_OSEdition',
         'Census_OSSkuName',
         'Census_OSInstallTypeName',
         'Census_OSInstallLanguageIdentifier',
         'Census_OSUILocaleIdentifier',
         'Census_OSWUAutoUpdateOptionsName',
         'Census_GenuineStateName',
         'Census_ActivationChannel',
         'Census_FlightRing',
         'Census_FirmwareManufacturerIdentifier',
         'Census_FirmwareVersionIdentifier',
         'Wdft_RegionIdentifier',
         
         'OsBuild',
         'OsSuite',
         
         'OsBuildLab_major',
         'OsBuildLab_minor',
         'OsBuildLab_build',
         'OsBuildLab_architecture',
         ]


def multi(args):
    
    cat, outpath_tr, outpath_te = args
    
    tbl = trte.groupby(cat).agg(num_agg)
    tbl.columns = [f'{cat}_{i}_{j}' for i,j in tbl.columns]
    tbl.reset_index(inplace=True)
    
    tr_f = pd.merge(tr[[cat]], tbl, on=cat, how='left')
    del tr_f[cat]
    
    te_f = pd.merge(te[[cat]], tbl, on=cat, how='left')
    del te_f[cat]
    
    utils.reduce_mem_usage(tr_f)
    tr_f.add_prefix(PREF+'_').to_feather(outpath_tr)
    
    utils.reduce_mem_usage(te_f)
    te_f.add_prefix(PREF+'_').to_feather(outpath_te)
    
    return

# =============================================================================
# main
# =============================================================================
if __name__ == "__main__":
    utils.start(__file__)
    
    os.system(f'rm -rf ../data/{PREF}')
    os.system(f'mkdir  ../data/{PREF}')
    
    tr = pd.read_feather('../data/train.f')
    te = pd.read_feather('../data/test.f')
    trte = pd.concat([tr, te])
    
    argss = []
    for i,c in enumerate(COL_CAT):
        argss.append([c, f'../data/{PREF}/train_{PREF}_{c}.f', f'../data/{PREF}/test_{PREF}_{c}.f'])
    
    pool = Pool( 10 )
    pool.map(multi, argss)
    pool.close()
    
    
    utils.end(__file__)


